
//campus.mcgill.ca/emf/SWE/bkella/My Documents/ECSE 324/G11_Lab3/LEDs.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	00 08 00 00 04 08 00 00 08 08 00 00 0c 08 00 00     ................
  30:	10 08 00 00 fc 0c 00 00 dc 06 00 00 14 08 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0002ef 	bl	c98 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000de4 	.word	0x00000de4

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001220 	.word	0x00001220

00000124 <__cs3_heap_start_ptr>:
 124:	00001248 	.word	0x00001248

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001228 	.word	0x00001228
 170:	0000122b 	.word	0x0000122b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001228 	.word	0x00001228
 1bc:	00001228 	.word	0x00001228
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001228 	.word	0x00001228
 200:	00000000 	.word	0x00000000
 204:	00000d88 	.word	0x00000d88

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000d88 	.word	0x00000d88
 250:	0000122c 	.word	0x0000122c
 254:	00000de8 	.word	0x00000de8
 258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
		.global HEX_flood_ASM
		.global HEX_write_ASM

// R0 -> hex
HEX_clear_ASM:
	push {LR}
 25c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0x000000
 260:	e3a01000 	mov	r1, #0
	BL WRITE_TO_HEX
 264:	eb00000c 	bl	29c <WRITE_TO_HEX>
	pop {LR}
 268:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 26c:	e12fff1e 	bx	lr

00000270 <HEX_flood_ASM>:

HEX_flood_ASM:
	push {LR}
 270:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0x000006
 274:	e3a01006 	mov	r1, #6
	BL WRITE_TO_HEX
 278:	eb000007 	bl	29c <WRITE_TO_HEX>
	pop {LR}
 27c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 280:	e12fff1e 	bx	lr

00000284 <HEX_write_ASM>:

HEX_write_ASM:
	push {LR}
 284:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	//BL HEX_clear_ASM			// Clear displays
	LDR R3, =LOOKUP
 288:	e59f30c0 	ldr	r3, [pc, #192]	; 350 <LOOKUP+0x40>
	LDR R1, [R3, R1, LSL #2]
 28c:	e7931101 	ldr	r1, [r3, r1, lsl #2]
	BL WRITE_TO_HEX
 290:	eb000001 	bl	29c <WRITE_TO_HEX>
	pop {LR}
 294:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 298:	e12fff1e 	bx	lr

0000029c <WRITE_TO_HEX>:
// ARGS: 
//			R0 - Flag register for selecting which display to write to.
//					Ex: 100101 writes to the 1st, 3rd and 5th hexidecimal displays
//			R1 - Value to write to each display
WRITE_TO_HEX:
		PUSH {R4-R8,LR} 		// Save state by pushing non-arg registers onto the stack
 29c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
		MOV R7, R1				// Copy R1 into R7 (Read-only of val)
 2a0:	e1a07001 	mov	r7, r1
		LDR R1, =HEX_0_to_3
 2a4:	e59f10a8 	ldr	r1, [pc, #168]	; 354 <LOOKUP+0x44>
		LDR R2, =HEX_4_to_5
 2a8:	e59f20a8 	ldr	r2, [pc, #168]	; 358 <LOOKUP+0x48>
		MOV R3, #0				// R3 = count
 2ac:	e3a03000 	mov	r3, #0
		MOV R4, #1				// R4 is used as a bitmask to get each flag from R0
 2b0:	e3a04001 	mov	r4, #1

000002b4 <LOOP>:

LOOP: 	TST R0, R4				// R0 & R4 - Apply bitmask
 2b4:	e1100004 	tst	r0, r4
		BEQ SHIFT				// Continue. Bit is not set
 2b8:	0a00000e 	beq	2f8 <SHIFT>
		
		MOV R5, R7
 2bc:	e1a05007 	mov	r5, r7
		MOV R8, #0x00007F
 2c0:	e3a0807f 	mov	r8, #127	; 0x7f

		SUB R6, R3, #32
 2c4:	e2436020 	sub	r6, r3, #32

		CMP R3, #32			// R3 - 32
 2c8:	e3530020 	cmp	r3, #32
		LSLLT R5, R5, R3	// Shift the value into place
 2cc:	b1a05315 	lsllt	r5, r5, r3
		LSLLT R8, R8, R3
 2d0:	b1a08318 	lsllt	r8, r8, r3

		LSLGE R5, R5, R6
 2d4:	a1a05615 	lslge	r5, r5, r6
		LSLGE R8, R8, R6	
 2d8:	a1a08618 	lslge	r8, r8, r6

		NEG R8, R8			// Negate R8
 2dc:	e2688000 	rsb	r8, r8, #0

		LDRGE R6, [R2]
 2e0:	a5926000 	ldrge	r6, [r2]
		LDRLT R6, [R1]
 2e4:	b5916000 	ldrlt	r6, [r1]
		
		AND R6, R6, R8		// Apply mask
 2e8:	e0066008 	and	r6, r6, r8
		ORR R5, R5, R6		// OR value
 2ec:	e1855006 	orr	r5, r5, r6
		STRGE R5, [R2]		// if (R3 >= 32) *R2 = R5		STRBGE
 2f0:	a5825000 	strge	r5, [r2]
		STRLT R5, [R1]		// if (R3 < 32) *R1 = R5			STRBLT
 2f4:	b5815000 	strlt	r5, [r1]

000002f8 <SHIFT>:

SHIFT:  ADDS R3, R3, #8		// R3 += 8
 2f8:	e2933008 	adds	r3, r3, #8
		CMP R3, #48			// While (R3 < 7);
 2fc:	e3530030 	cmp	r3, #48	; 0x30
		POPEQ {R4-R8,LR}	// Restore state by popping R4 - LR from stack
 300:	08bd41f0 	popeq	{r4, r5, r6, r7, r8, lr}
		BXEQ LR				// Branch link out of routine
 304:	012fff1e 	bxeq	lr
		LSL R4, R4, #1		// R4 << 1
 308:	e1a04084 	lsl	r4, r4, #1
		B LOOP				// GOTO  LOOP
 30c:	eaffffe8 	b	2b4 <LOOP>

00000310 <LOOKUP>:
 310:	0000003f 	.word	0x0000003f
 314:	00000006 	.word	0x00000006
 318:	0000005b 	.word	0x0000005b
 31c:	0000004f 	.word	0x0000004f
 320:	00000066 	.word	0x00000066
 324:	0000006d 	.word	0x0000006d
 328:	0000007d 	.word	0x0000007d
 32c:	00000007 	.word	0x00000007
 330:	0000007f 	.word	0x0000007f
 334:	00000067 	.word	0x00000067
 338:	00000077 	.word	0x00000077
 33c:	0000007c 	.word	0x0000007c
 340:	00000039 	.word	0x00000039
 344:	0000005e 	.word	0x0000005e
 348:	00000079 	.word	0x00000079
 34c:	00000071 	.word	0x00000071
	BX LR

HEX_write_ASM:
	push {LR}
	//BL HEX_clear_ASM			// Clear displays
	LDR R3, =LOOKUP
 350:	00000310 	.word	0x00000310
//					Ex: 100101 writes to the 1st, 3rd and 5th hexidecimal displays
//			R1 - Value to write to each display
WRITE_TO_HEX:
		PUSH {R4-R8,LR} 		// Save state by pushing non-arg registers onto the stack
		MOV R7, R1				// Copy R1 into R7 (Read-only of val)
		LDR R1, =HEX_0_to_3
 354:	ff200020 	.word	0xff200020
		LDR R2, =HEX_4_to_5
 358:	ff200030 	.word	0xff200030

0000035c <read_LEDs_ASM>:
		.global read_LEDs_ASM
		.global write_LEDs_ASM

// Load the value at the LEDs memory location into R0 and then branch to LR
read_LEDs_ASM:
		LDR R1, =LED_BASE
 35c:	e59f1010 	ldr	r1, [pc, #16]	; 374 <write_LEDs_ASM+0xc>
		LDR R0, [R1]
 360:	e5910000 	ldr	r0, [r1]
		BX LR
 364:	e12fff1e 	bx	lr

00000368 <write_LEDs_ASM>:

// Store the value in R0 at the LEDs memorgy location and then branch to LR
write_LEDs_ASM:
		LDR R1, =LED_BASE
 368:	e59f1004 	ldr	r1, [pc, #4]	; 374 <write_LEDs_ASM+0xc>
		STR R0, [R1]		
 36c:	e5810000 	str	r0, [r1]
		BX LR
 370:	e12fff1e 	bx	lr
		.global read_LEDs_ASM
		.global write_LEDs_ASM

// Load the value at the LEDs memory location into R0 and then branch to LR
read_LEDs_ASM:
		LDR R1, =LED_BASE
 374:	ff200000 	.word	0xff200000

00000378 <read_slider_switches_ASM>:
											// . word is like unsigned int int C
											// See: https://stackoverflow.com/questions/21624155/difference-between-equ-and-word-in-arm-assembly
		.global read_slider_switches_ASM

read_slider_switches_ASM:
		LDR R1, =SW_BASE
 378:	e59f1004 	ldr	r1, [pc, #4]	; 384 <read_slider_switches_ASM+0xc>
		LDR R0, [R1]
 37c:	e5910000 	ldr	r0, [r1]
		BX LR
 380:	e12fff1e 	bx	lr
											// . word is like unsigned int int C
											// See: https://stackoverflow.com/questions/21624155/difference-between-equ-and-word-in-arm-assembly
		.global read_slider_switches_ASM

read_slider_switches_ASM:
		LDR R1, =SW_BASE
 384:	ff200040 	.word	0xff200040

00000388 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
 388:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
 38c:	e3a01000 	mov	r1, #0
	MOV R2, #1
 390:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
 394:	e5907000 	ldr	r7, [r0]
	B LOOP
 398:	eaffffff 	b	39c <LOOP>

0000039c <LOOP>:

LOOP:
	TST R7, R2, LSL R1
 39c:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
 3a0:	0a000000 	beq	3a8 <CONTINUE>
	BL CONFIG
 3a4:	eb000004 	bl	3bc <CONFIG>

000003a8 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
 3a8:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 3ac:	e3510004 	cmp	r1, #4
	BLT LOOP
 3b0:	bafffff9 	blt	39c <LOOP>

000003b4 <DONE>:

DONE:
	POP {R4-R7, LR}
 3b4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
 3b8:	e12fff1e 	bx	lr

000003bc <CONFIG>:


CONFIG:
	PUSH {LR}
 3bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
 3c0:	e59f3148 	ldr	r3, [pc, #328]	; 510 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
 3c4:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
 3c8:	eb000005 	bl	3e4 <DISABLE>
	BL SET_LOAD_VAL
 3cc:	eb000008 	bl	3f4 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
 3d0:	eb00000e 	bl	410 <SET_LOAD_BIT>
	BL SET_INT_BIT
 3d4:	eb000013 	bl	428 <SET_INT_BIT>
	BL SET_EN_BIT
 3d8:	eb000019 	bl	444 <SET_EN_BIT>
	
	POP {LR}
 3dc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
 3e0:	e12fff1e 	bx	lr

000003e4 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
 3e4:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
 3e8:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
 3ec:	e5845008 	str	r5, [r4, #8]
	BX LR
 3f0:	e12fff1e 	bx	lr

000003f4 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
 3f4:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
 3f8:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
 3fc:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
 400:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
 404:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
 408:	e5845000 	str	r5, [r4]
	BX LR
 40c:	e12fff1e 	bx	lr

00000410 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
 410:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
 414:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
 418:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
 41c:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
 420:	e5845008 	str	r5, [r4, #8]
	BX LR
 424:	e12fff1e 	bx	lr

00000428 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
 428:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
 42c:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
 430:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
 434:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
 438:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
 43c:	e5845008 	str	r5, [r4, #8]
	BX LR
 440:	e12fff1e 	bx	lr

00000444 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
 444:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
 448:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
 44c:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
 450:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
 454:	e5845008 	str	r5, [r4, #8]
	BX LR
 458:	e12fff1e 	bx	lr

0000045c <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
 45c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
 460:	e3a01000 	mov	r1, #0
	MOV R2, #1
 464:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
 468:	eaffffff 	b	46c <CLEAR_INT_LOOP>

0000046c <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
 46c:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
 470:	0a000000 	beq	478 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
 474:	eb000005 	bl	490 <CLEAR_INT>

00000478 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
 478:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 47c:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
 480:	bafffff9 	blt	46c <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
 484:	eaffffff 	b	488 <CLEAR_INT_DONE>

00000488 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
 488:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 48c:	e12fff1e 	bx	lr

00000490 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
 490:	e59f3078 	ldr	r3, [pc, #120]	; 510 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 494:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
 498:	e593300c 	ldr	r3, [r3, #12]
	BX LR
 49c:	e12fff1e 	bx	lr

000004a0 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
 4a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
 4a4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
 4a8:	e3a01000 	mov	r1, #0
	MOV R2, #1
 4ac:	e3a02001 	mov	r2, #1
	MOV R4, #0
 4b0:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
 4b4:	eaffffff 	b	4b8 <READ_INT_LOOP>

000004b8 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
 4b8:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
 4bc:	0a000000 	beq	4c4 <READ_INT_CONTINUE>
	BL READ_INT
 4c0:	eb000008 	bl	4e8 <READ_INT>

000004c4 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
 4c4:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 4c8:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
 4cc:	0a000001 	beq	4d8 <READ_INT_DONE>
	LSL R4, R4, #1
 4d0:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
 4d4:	eafffff7 	b	4b8 <READ_INT_LOOP>

000004d8 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
 4d8:	e1a00004 	mov	r0, r4
	POP {R4}
 4dc:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
 4e0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 4e4:	e12fff1e 	bx	lr

000004e8 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
 4e8:	e59f3020 	ldr	r3, [pc, #32]	; 510 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 4ec:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
 4f0:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
 4f4:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
 4f8:	e0244003 	eor	r4, r4, r3
	BX LR
 4fc:	e12fff1e 	bx	lr

00000500 <HPS_TIM_BASE>:
 500:	ffc08000 	.word	0xffc08000
 504:	ffc09000 	.word	0xffc09000
 508:	ffd00000 	.word	0xffd00000
 50c:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
 510:	00000500 	.word	0x00000500

00000514 <hps_tim0_int_flag>:
 514:	00000000 	.word	0x00000000

00000518 <pb_int_flag>:
 518:	00000000 	.word	0x00000000

0000051c <A9_PRIV_TIM_ISR>:
	
pb_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
 51c:	e12fff1e 	bx	lr

00000520 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
 520:	e12fff1e 	bx	lr

00000524 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
 524:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV R0, #0x1
 528:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
 52c:	ebffffca 	bl	45c <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
 530:	e59f0054 	ldr	r0, [pc, #84]	; 58c <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1,#1
 534:	e3a01001 	mov	r1, #1
	STR R1, [R0]
 538:	e5801000 	str	r1, [r0]

	POP {LR}
 53c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 540:	e12fff1e 	bx	lr

00000544 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
 544:	e12fff1e 	bx	lr

00000548 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
 548:	e12fff1e 	bx	lr

0000054c <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
 54c:	e12fff1e 	bx	lr

00000550 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
 550:	e12fff1e 	bx	lr

00000554 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
 554:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	BL read_PB_edgecap_ASM
 558:	eb000010 	bl	5a0 <read_PB_edgecap_ASM>

	LDR R1,=pb_int_flag
 55c:	e59f102c 	ldr	r1, [pc, #44]	; 590 <FPGA_PS2_DUAL_ISR+0x8>
	STR R0, [R1]
 560:	e5810000 	str	r0, [r1]

	BL PB_clear_edgecap_ASM
 564:	eb00001f 	bl	5e8 <PB_clear_edgecap_ASM>

	POP {LR}
 568:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 56c:	e12fff1e 	bx	lr

00000570 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
 570:	e12fff1e 	bx	lr

00000574 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
 574:	e12fff1e 	bx	lr

00000578 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
 578:	e12fff1e 	bx	lr

0000057c <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
 57c:	e12fff1e 	bx	lr

00000580 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
 580:	e12fff1e 	bx	lr

00000584 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
 584:	e12fff1e 	bx	lr

00000588 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
 588:	e12fff1e 	bx	lr
	PUSH {LR}

	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM

	LDR R0, =hps_tim0_int_flag
 58c:	00000514 	.word	0x00000514
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
	BL read_PB_edgecap_ASM

	LDR R1,=pb_int_flag
 590:	00000518 	.word	0x00000518

00000594 <read_PB_data_ASM>:
		.global enable_PB_INT_ASM, disable_PB_INT_ASM, 



read_PB_data_ASM:
					LDR R0, =PB_BASE
 594:	e59f0080 	ldr	r0, [pc, #128]	; 61c <disable_PB_INT_ASM+0x14>
					LDR R0, [R0]
 598:	e5900000 	ldr	r0, [r0]
					BX LR   					//Return to Link register
 59c:	e12fff1e 	bx	lr

000005a0 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
					LDR R0,=PB_INT
 5a0:	e59f0078 	ldr	r0, [pc, #120]	; 620 <disable_PB_INT_ASM+0x18>
					LDR R0, [R0]				// Load Edgecapture register
 5a4:	e5900000 	ldr	r0, [r0]
					AND R0, R0, #0xF			// Get lower 4 bits (Edge bits)
 5a8:	e200000f 	and	r0, r0, #15
					BX LR 						//Return to Link register
 5ac:	e12fff1e 	bx	lr

000005b0 <PB_data_is_pressed_ASM>:


PB_data_is_pressed_ASM:
					MOV R3, R0				// Copy R0
 5b0:	e1a03000 	mov	r3, r0
					MOV R0, #0 				//set to false by default
 5b4:	e3a00000 	mov	r0, #0
					LDR R1, =PB_BASE	
 5b8:	e59f105c 	ldr	r1, [pc, #92]	; 61c <disable_PB_INT_ASM+0x14>
					LDR R2, [R1]		
 5bc:	e5912000 	ldr	r2, [r1]
					ANDS R2, R2, R3 		// R2 = R2 & R3
 5c0:	e0122003 	ands	r2, r2, r3
					MOVEQ R0, #1 			// If R2
 5c4:	03a00001 	moveq	r0, #1
					BX LR    				//Return to Link register
 5c8:	e12fff1e 	bx	lr

000005cc <PB_edgecap_is_pressed_ASM>:



PB_edgecap_is_pressed_ASM:
					MOV R3, R0
 5cc:	e1a03000 	mov	r3, r0
					MOV R0, #0
 5d0:	e3a00000 	mov	r0, #0
					LDR R1, =PB_INT	
 5d4:	e59f1044 	ldr	r1, [pc, #68]	; 620 <disable_PB_INT_ASM+0x18>
					LDR R1, [R1]	
 5d8:	e5911000 	ldr	r1, [r1]
					ANDS R2, R1, R3				
 5dc:	e0112003 	ands	r2, r1, r3
					MOVEQ R0, #1			
 5e0:	03a00001 	moveq	r0, #1
					BX LR
 5e4:	e12fff1e 	bx	lr

000005e8 <PB_clear_edgecap_ASM>:


PB_clear_edgecap_ASM:
					LDR R2, =PB_INT
 5e8:	e59f2030 	ldr	r2, [pc, #48]	; 620 <disable_PB_INT_ASM+0x18>
					MOV R1, #0x7
 5ec:	e3a01007 	mov	r1, #7
					STR R1, [R2]	
 5f0:	e5821000 	str	r1, [r2]
					BX LR
 5f4:	e12fff1e 	bx	lr

000005f8 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
					LDR R2, =PB_BASE	
 5f8:	e59f201c 	ldr	r2, [pc, #28]	; 61c <disable_PB_INT_ASM+0x14>
					AND R1, R0, #0xF	
 5fc:	e200100f 	and	r1, r0, #15
					STR R1, [R2, #0x8]	
 600:	e5821008 	str	r1, [r2, #8]
					BX LR
 604:	e12fff1e 	bx	lr

00000608 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
					LDR R2, =PB_BASE	
 608:	e59f200c 	ldr	r2, [pc, #12]	; 61c <disable_PB_INT_ASM+0x14>
					LDR R1, [R2, #0x8]	
 60c:	e5921008 	ldr	r1, [r2, #8]
					BIC R1, R1, R0		
 610:	e1c11000 	bic	r1, r1, r0
					STR R1, [R2, #0x8]	
 614:	e5821008 	str	r1, [r2, #8]
					BX LR
 618:	e12fff1e 	bx	lr
		.global enable_PB_INT_ASM, disable_PB_INT_ASM, 



read_PB_data_ASM:
					LDR R0, =PB_BASE
 61c:	ff200050 	.word	0xff200050
					LDR R0, [R0]
					BX LR   					//Return to Link register

read_PB_edgecap_ASM:
					LDR R0,=PB_INT
 620:	ff20005c 	.word	0xff20005c

00000624 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 624:	e3a030d3 	mov	r3, #211	; 0xd3
 628:	e129f003 	msr	CPSR_fc, r3
 62c:	e12fff1e 	bx	lr

00000630 <enable_A9_interrupts>:
}

void enable_A9_interrupts() {
	int status = 0b01010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 630:	e3a03053 	mov	r3, #83	; 0x53
 634:	e129f003 	msr	CPSR_fc, r3
 638:	e12fff1e 	bx	lr

0000063c <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
	mode = 0b11010010;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 63c:	e3a030d2 	mov	r3, #210	; 0xd2
 640:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
 644:	e3e03007 	mvn	r3, #7
 648:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 64c:	e3a030d3 	mov	r3, #211	; 0xd3
 650:	e129f003 	msr	CPSR_fc, r3
 654:	e12fff1e 	bx	lr

00000658 <config_interrupt>:
}

void config_interrupt(int ID, int CPU) {
 658:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
 65c:	e1a031c0 	asr	r3, r0, #3
 660:	e3c33003 	bic	r3, r3, #3
	index = ID & 0x1F;
	value = 1<<index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
 664:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
	index = ID & 0x1F;
 668:	e200201f 	and	r2, r0, #31
	value = 1<<index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
	*(int *)address |= value;
 66c:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
 670:	e3a04001 	mov	r4, #1
 674:	e18c2214 	orr	r2, r12, r4, lsl r2
 678:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	
	reg_offset = (ID & 0xFFFFFFFC);
	index = ID & 3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	*(char *)address = (char)CPU;
 67c:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
 680:	e5c01000 	strb	r1, [r0]
}
 684:	e8bd0010 	ldmfd	sp!, {r4}
 688:	e12fff1e 	bx	lr

0000068c <config_GIC>:

void config_GIC(int len, int* IDs) {
 68c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0 ; i<len ; i++)
 690:	e2506000 	subs	r6, r0, #0
 694:	da000008 	ble	6bc <config_GIC+0x30>
	index = ID & 3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
 698:	e2415004 	sub	r5, r1, #4
	int i;
	for(i=0 ; i<len ; i++)
 69c:	e3a04000 	mov	r4, #0
		config_interrupt(IDs[i],1);
 6a0:	e3a07001 	mov	r7, #1
 6a4:	e5b50004 	ldr	r0, [r5, #4]!
 6a8:	e1a01007 	mov	r1, r7
 6ac:	ebffffe9 	bl	658 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
 6b0:	e2844001 	add	r4, r4, #1
 6b4:	e1540006 	cmp	r4, r6
 6b8:	1afffff9 	bne	6a4 <config_GIC+0x18>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
 6bc:	e3e02a13 	mvn	r2, #77824	; 0x13000
 6c0:	e30f3fff 	movw	r3, #65535	; 0xffff
 6c4:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
 6c8:	e3a03001 	mov	r3, #1
 6cc:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	*((int *) (MPCORE_GIC_DIST)) = 1;
 6d0:	e3e02a12 	mvn	r2, #73728	; 0x12000
 6d4:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
 6d8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000006dc <__cs3_isr_irq>:
}

void __attribute__ ((interrupt)) __cs3_isr_irq() {
 6dc:	e24ee004 	sub	lr, lr, #4
 6e0:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
 6e4:	e3e03a13 	mvn	r3, #77824	; 0x13000
 6e8:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
	
	switch(interrupt_ID) {
 6ec:	e3540053 	cmp	r4, #83	; 0x53
 6f0:	0a000038 	beq	7d8 <__cs3_isr_irq+0xfc>
 6f4:	ca00000f 	bgt	738 <__cs3_isr_irq+0x5c>
 6f8:	e354004e 	cmp	r4, #78	; 0x4e
 6fc:	0a00002d 	beq	7b8 <__cs3_isr_irq+0xdc>
 700:	ca000006 	bgt	720 <__cs3_isr_irq+0x44>
 704:	e3540048 	cmp	r4, #72	; 0x48
 708:	0a000026 	beq	7a8 <__cs3_isr_irq+0xcc>
 70c:	e3540049 	cmp	r4, #73	; 0x49
 710:	0a000026 	beq	7b0 <__cs3_isr_irq+0xd4>
 714:	e354001d 	cmp	r4, #29
 718:	0a000016 	beq	778 <__cs3_isr_irq+0x9c>
 71c:	ea000033 	b	7f0 <__cs3_isr_irq+0x114>
 720:	e3540050 	cmp	r4, #80	; 0x50
 724:	0a000027 	beq	7c8 <__cs3_isr_irq+0xec>
 728:	ba000024 	blt	7c0 <__cs3_isr_irq+0xe4>
 72c:	e3540051 	cmp	r4, #81	; 0x51
 730:	0a000026 	beq	7d0 <__cs3_isr_irq+0xf4>
 734:	ea00002d 	b	7f0 <__cs3_isr_irq+0x114>
 738:	e35400c7 	cmp	r4, #199	; 0xc7
 73c:	0a000011 	beq	788 <__cs3_isr_irq+0xac>
 740:	ca000006 	bgt	760 <__cs3_isr_irq+0x84>
 744:	e3540059 	cmp	r4, #89	; 0x59
 748:	0a000026 	beq	7e8 <__cs3_isr_irq+0x10c>
 74c:	e35400c5 	cmp	r4, #197	; 0xc5
 750:	0a00000a 	beq	780 <__cs3_isr_irq+0xa4>
 754:	e3540054 	cmp	r4, #84	; 0x54
 758:	0a000020 	beq	7e0 <__cs3_isr_irq+0x104>
 75c:	ea000023 	b	7f0 <__cs3_isr_irq+0x114>
 760:	e35400c9 	cmp	r4, #201	; 0xc9
 764:	0a00000b 	beq	798 <__cs3_isr_irq+0xbc>
 768:	ba000008 	blt	790 <__cs3_isr_irq+0xb4>
 76c:	e35400ca 	cmp	r4, #202	; 0xca
 770:	0a00000a 	beq	7a0 <__cs3_isr_irq+0xc4>
 774:	ea00001d 	b	7f0 <__cs3_isr_irq+0x114>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
 778:	ebffff67 	bl	51c <A9_PRIV_TIM_ISR>
 77c:	ea00001c 	b	7f4 <__cs3_isr_irq+0x118>
		case 197: HPS_GPIO1_ISR(); break;
 780:	ebffff66 	bl	520 <HPS_GPIO1_ISR>
 784:	ea00001a 	b	7f4 <__cs3_isr_irq+0x118>
		case 199: HPS_TIM0_ISR(); break;
 788:	ebffff65 	bl	524 <HPS_TIM0_ISR>
 78c:	ea000018 	b	7f4 <__cs3_isr_irq+0x118>
		case 200: HPS_TIM1_ISR(); break;
 790:	ebffff6b 	bl	544 <HPS_TIM1_ISR>
 794:	ea000016 	b	7f4 <__cs3_isr_irq+0x118>
		case 201: HPS_TIM2_ISR(); break;
 798:	ebffff6a 	bl	548 <HPS_TIM2_ISR>
 79c:	ea000014 	b	7f4 <__cs3_isr_irq+0x118>
		case 202: HPS_TIM3_ISR(); break;
 7a0:	ebffff69 	bl	54c <HPS_TIM3_ISR>
 7a4:	ea000012 	b	7f4 <__cs3_isr_irq+0x118>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
 7a8:	ebffff68 	bl	550 <FPGA_INTERVAL_TIM_ISR>
 7ac:	ea000010 	b	7f4 <__cs3_isr_irq+0x118>
		case 73:  FPGA_PB_KEYS_ISR(); break;
 7b0:	ebffff67 	bl	554 <FPGA_PB_KEYS_ISR>
 7b4:	ea00000e 	b	7f4 <__cs3_isr_irq+0x118>
		case 78:  FPGA_Audio_ISR(); break;
 7b8:	ebffff6c 	bl	570 <FPGA_Audio_ISR>
 7bc:	ea00000c 	b	7f4 <__cs3_isr_irq+0x118>
		case 79:  FPGA_PS2_ISR(); break;
 7c0:	ebffff6b 	bl	574 <FPGA_PS2_ISR>
 7c4:	ea00000a 	b	7f4 <__cs3_isr_irq+0x118>
		case 80:  FPGA_JTAG_ISR(); break;
 7c8:	ebffff6a 	bl	578 <FPGA_JTAG_ISR>
 7cc:	ea000008 	b	7f4 <__cs3_isr_irq+0x118>
		case 81:  FPGA_IrDA_ISR(); break;
 7d0:	ebffff69 	bl	57c <FPGA_IrDA_ISR>
 7d4:	ea000006 	b	7f4 <__cs3_isr_irq+0x118>
		case 83:  FPGA_JP1_ISR(); break;
 7d8:	ebffff68 	bl	580 <FPGA_JP1_ISR>
 7dc:	ea000004 	b	7f4 <__cs3_isr_irq+0x118>
		case 84:  FPGA_JP2_ISR(); break;
 7e0:	ebffff67 	bl	584 <FPGA_JP2_ISR>
 7e4:	ea000002 	b	7f4 <__cs3_isr_irq+0x118>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
 7e8:	ebffff66 	bl	588 <FPGA_PS2_DUAL_ISR>
 7ec:	ea000000 	b	7f4 <__cs3_isr_irq+0x118>
 7f0:	eafffffe 	b	7f0 <__cs3_isr_irq+0x114>
	
		default: while(1); break;
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
 7f4:	e3e03a13 	mvn	r3, #77824	; 0x13000
 7f8:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
 7fc:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

00000800 <__cs3_reset>:
}

void __attribute__ ((interrupt)) __cs3_reset (void) {
 800:	eafffffe 	b	800 <__cs3_reset>

00000804 <__cs3_isr_undef>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
 804:	eafffffe 	b	804 <__cs3_isr_undef>

00000808 <__cs3_isr_swi>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
 808:	eafffffe 	b	808 <__cs3_isr_swi>

0000080c <__cs3_isr_pabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
 80c:	eafffffe 	b	80c <__cs3_isr_pabort>

00000810 <__cs3_isr_dabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
 810:	eafffffe 	b	810 <__cs3_isr_dabort>

00000814 <__cs3_isr_fiq>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
 814:	eafffffe 	b	814 <__cs3_isr_fiq>

00000818 <fix_bug>:
	while(1);
}

void fix_bug() {
	volatile int * addr = (int *)0xFFFED198;
	*addr = 0x000C0000;
 818:	e3a02703 	mov	r2, #786432	; 0xc0000
 81c:	e3e03a12 	mvn	r3, #73728	; 0x12000
 820:	e5032e67 	str	r2, [r3, #-3687]	; 0xfffff199
 824:	e12fff1e 	bx	lr

00000828 <int_setup>:
}

void int_setup(int len, int* IDs) {
 828:	e92d4038 	push	{r3, r4, r5, lr}
 82c:	e1a05000 	mov	r5, r0
 830:	e1a04001 	mov	r4, r1
	disable_A9_interrupts();
 834:	ebffff7a 	bl	624 <disable_A9_interrupts>
	set_A9_IRQ_stack();
 838:	ebffff7f 	bl	63c <set_A9_IRQ_stack>
	fix_bug();
 83c:	ebfffff5 	bl	818 <fix_bug>
	config_GIC(len, IDs);
 840:	e1a00005 	mov	r0, r5
 844:	e1a01004 	mov	r1, r4
 848:	ebffff8f 	bl	68c <config_GIC>
	enable_A9_interrupts();
 84c:	ebffff77 	bl	630 <enable_A9_interrupts>
 850:	e8bd8038 	pop	{r3, r4, r5, pc}

00000854 <main>:
#include "./drivers/inc/HPS_TIM.h"




int main(){
 854:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 858:	e24dd01c 	sub	sp, sp, #28
	int count0=0, count1=0, count2=0, count3=0;
	HPS_TIM_config_t hps_tim;

	hps_tim.tim =TIM0|TIM1|TIM2|TIM3;
 85c:	e3a0200f 	mov	r2, #15
 860:	e5cd2004 	strb	r2, [sp, #4]
	hps_tim.timeout=1000000;
 864:	e3043240 	movw	r3, #16960	; 0x4240
 868:	e7df3812 	bfi	r3, r2, #16, #16
 86c:	e58d3008 	str	r3, [sp, #8]
	hps_tim.LD_en =1;
 870:	e3a03001 	mov	r3, #1
 874:	e58d300c 	str	r3, [sp, #12]
	hps_tim.INT_en=1;
 878:	e58d3010 	str	r3, [sp, #16]
	hps_tim.enable=1;
 87c:	e58d3014 	str	r3, [sp, #20]


	HPS_TIM_config_ASM(&hps_tim);
 880:	e28d0004 	add	r0, sp, #4
 884:	ebfffebf 	bl	388 <HPS_TIM_config_ASM>




int main(){
	int count0=0, count1=0, count2=0, count3=0;
 888:	e3a04000 	mov	r4, #0
 88c:	e1a08004 	mov	r8, r4
 890:	e1a07004 	mov	r7, r4
 894:	e1a06004 	mov	r6, r4


	HPS_TIM_config_ASM(&hps_tim);

	while(1){
		if(HPS_TIM_read_INT_ASM(TIM0)){
 898:	e3a0b001 	mov	r11, #1
			if(++count0==16){
				count0=0;
			}
			HEX_write_ASM(HEX0,count0);
		}
		if(HPS_TIM_read_INT_ASM(TIM1)){
 89c:	e3a09002 	mov	r9, #2
			if(++count1==16){
				count1=0;
			}
			HEX_write_ASM(HEX1,count1);
		}
		if(HPS_TIM_read_INT_ASM(TIM2)){
 8a0:	e3a0a004 	mov	r10, #4
			if(++count2==16){
				count2=0;
			}
			HEX_write_ASM(HEX2,count2);
		}
		if(HPS_TIM_read_INT_ASM(TIM3)){
 8a4:	e3a05008 	mov	r5, #8


	HPS_TIM_config_ASM(&hps_tim);

	while(1){
		if(HPS_TIM_read_INT_ASM(TIM0)){
 8a8:	e1a0000b 	mov	r0, r11
 8ac:	ebfffefb 	bl	4a0 <HPS_TIM_read_INT_ASM>
 8b0:	e3500000 	cmp	r0, #0
 8b4:	0a000007 	beq	8d8 <main+0x84>
			HPS_TIM_clear_INT_ASM(TIM0);
 8b8:	e1a0000b 	mov	r0, r11
 8bc:	ebfffee6 	bl	45c <HPS_TIM_clear_INT_ASM>
			if(++count0==16){
 8c0:	e2866001 	add	r6, r6, #1
				count0=0;
 8c4:	e3560010 	cmp	r6, #16
 8c8:	03a06000 	moveq	r6, #0
			}
			HEX_write_ASM(HEX0,count0);
 8cc:	e1a0000b 	mov	r0, r11
 8d0:	e6ef1076 	uxtb	r1, r6
 8d4:	ebfffe6a 	bl	284 <HEX_write_ASM>
		}
		if(HPS_TIM_read_INT_ASM(TIM1)){
 8d8:	e1a00009 	mov	r0, r9
 8dc:	ebfffeef 	bl	4a0 <HPS_TIM_read_INT_ASM>
 8e0:	e3500000 	cmp	r0, #0
 8e4:	0a000007 	beq	908 <main+0xb4>
			HPS_TIM_clear_INT_ASM(TIM1);
 8e8:	e1a00009 	mov	r0, r9
 8ec:	ebfffeda 	bl	45c <HPS_TIM_clear_INT_ASM>
			if(++count1==16){
 8f0:	e2877001 	add	r7, r7, #1
				count1=0;
 8f4:	e3570010 	cmp	r7, #16
 8f8:	03a07000 	moveq	r7, #0
			}
			HEX_write_ASM(HEX1,count1);
 8fc:	e1a00009 	mov	r0, r9
 900:	e6ef1077 	uxtb	r1, r7
 904:	ebfffe5e 	bl	284 <HEX_write_ASM>
		}
		if(HPS_TIM_read_INT_ASM(TIM2)){
 908:	e1a0000a 	mov	r0, r10
 90c:	ebfffee3 	bl	4a0 <HPS_TIM_read_INT_ASM>
 910:	e3500000 	cmp	r0, #0
 914:	0a000007 	beq	938 <main+0xe4>
			HPS_TIM_clear_INT_ASM(TIM2);
 918:	e1a0000a 	mov	r0, r10
 91c:	ebfffece 	bl	45c <HPS_TIM_clear_INT_ASM>
			if(++count2==16){
 920:	e2888001 	add	r8, r8, #1
				count2=0;
 924:	e3580010 	cmp	r8, #16
 928:	03a08000 	moveq	r8, #0
			}
			HEX_write_ASM(HEX2,count2);
 92c:	e1a0000a 	mov	r0, r10
 930:	e6ef1078 	uxtb	r1, r8
 934:	ebfffe52 	bl	284 <HEX_write_ASM>
		}
		if(HPS_TIM_read_INT_ASM(TIM3)){
 938:	e1a00005 	mov	r0, r5
 93c:	ebfffed7 	bl	4a0 <HPS_TIM_read_INT_ASM>
 940:	e3500000 	cmp	r0, #0
 944:	0affffd7 	beq	8a8 <main+0x54>
			HPS_TIM_clear_INT_ASM(TIM3);
 948:	e1a00005 	mov	r0, r5
 94c:	ebfffec2 	bl	45c <HPS_TIM_clear_INT_ASM>
			if(++count3==16){
 950:	e2844001 	add	r4, r4, #1
				count3=0;
 954:	e3540010 	cmp	r4, #16
 958:	03a04000 	moveq	r4, #0
			}
			HEX_write_ASM(HEX3,count3);
 95c:	e1a00005 	mov	r0, r5
 960:	e6ef1074 	uxtb	r1, r4
 964:	ebfffe46 	bl	284 <HEX_write_ASM>
 968:	eaffffce 	b	8a8 <main+0x54>

0000096c <atexit>:
 96c:	e1a01000 	mov	r1, r0
 970:	e3a00000 	mov	r0, #0
 974:	e92d4008 	push	{r3, lr}
 978:	e1a02000 	mov	r2, r0
 97c:	e1a03000 	mov	r3, r0
 980:	eb00000e 	bl	9c0 <__register_exitproc>
 984:	e8bd4008 	pop	{r3, lr}
 988:	e12fff1e 	bx	lr

0000098c <exit>:
 98c:	e92d4008 	push	{r3, lr}
 990:	e3a01000 	mov	r1, #0
 994:	e1a04000 	mov	r4, r0
 998:	eb000045 	bl	ab4 <__call_exitprocs>
 99c:	e59f3018 	ldr	r3, [pc, #24]	; 9bc <exit+0x30>
 9a0:	e5930000 	ldr	r0, [r3]
 9a4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 9a8:	e3530000 	cmp	r3, #0
 9ac:	11a0e00f 	movne	lr, pc
 9b0:	112fff13 	bxne	r3
 9b4:	e1a00004 	mov	r0, r4
 9b8:	eb0000c9 	bl	ce4 <_exit>
 9bc:	00000d8c 	.word	0x00000d8c

000009c0 <__register_exitproc>:
 9c0:	e59fc0e4 	ldr	r12, [pc, #228]	; aac <__register_exitproc+0xec>
 9c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 9c8:	e59c4000 	ldr	r4, [r12]
 9cc:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 9d0:	e35c0000 	cmp	r12, #0
 9d4:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 9d8:	e59c5004 	ldr	r5, [r12, #4]
 9dc:	0584c148 	streq	r12, [r4, #328]	; 0x148
 9e0:	e355001f 	cmp	r5, #31
 9e4:	e24dd010 	sub	sp, sp, #16
 9e8:	e1a06000 	mov	r6, r0
 9ec:	da000015 	ble	a48 <__register_exitproc+0x88>
 9f0:	e59f00b8 	ldr	r0, [pc, #184]	; ab0 <__register_exitproc+0xf0>
 9f4:	e3500000 	cmp	r0, #0
 9f8:	1a000001 	bne	a04 <__register_exitproc+0x44>
 9fc:	e3e00000 	mvn	r0, #0
 a00:	ea000018 	b	a68 <__register_exitproc+0xa8>
 a04:	e3a00e19 	mov	r0, #400	; 0x190
 a08:	e58d100c 	str	r1, [sp, #12]
 a0c:	e58d2008 	str	r2, [sp, #8]
 a10:	e58d3004 	str	r3, [sp, #4]
 a14:	e320f000 	nop	{0}
 a18:	e250c000 	subs	r12, r0, #0
 a1c:	e59d100c 	ldr	r1, [sp, #12]
 a20:	e59d2008 	ldr	r2, [sp, #8]
 a24:	e59d3004 	ldr	r3, [sp, #4]
 a28:	0afffff3 	beq	9fc <__register_exitproc+0x3c>
 a2c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 a30:	e3a00000 	mov	r0, #0
 a34:	e58c0004 	str	r0, [r12, #4]
 a38:	e58c5000 	str	r5, [r12]
 a3c:	e584c148 	str	r12, [r4, #328]	; 0x148
 a40:	e58c0188 	str	r0, [r12, #392]	; 0x188
 a44:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 a48:	e3560000 	cmp	r6, #0
 a4c:	e59c4004 	ldr	r4, [r12, #4]
 a50:	1a000007 	bne	a74 <__register_exitproc+0xb4>
 a54:	e2843002 	add	r3, r4, #2
 a58:	e2844001 	add	r4, r4, #1
 a5c:	e78c1103 	str	r1, [r12, r3, lsl #2]
 a60:	e58c4004 	str	r4, [r12, #4]
 a64:	e3a00000 	mov	r0, #0
 a68:	e28dd010 	add	sp, sp, #16
 a6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 a70:	e12fff1e 	bx	lr
 a74:	e3a00001 	mov	r0, #1
 a78:	e1a00410 	lsl	r0, r0, r4
 a7c:	e08c8104 	add	r8, r12, r4, lsl #2
 a80:	e3560002 	cmp	r6, #2
 a84:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 a88:	e5883108 	str	r3, [r8, #264]	; 0x108
 a8c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 a90:	e1877000 	orr	r7, r7, r0
 a94:	01830000 	orreq	r0, r3, r0
 a98:	e1a05008 	mov	r5, r8
 a9c:	e5882088 	str	r2, [r8, #136]	; 0x88
 aa0:	e58c7188 	str	r7, [r12, #392]	; 0x188
 aa4:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 aa8:	eaffffe9 	b	a54 <__register_exitproc+0x94>
 aac:	00000d8c 	.word	0x00000d8c
 ab0:	00000000 	.word	0x00000000

00000ab4 <__call_exitprocs>:
 ab4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 ab8:	e59f3168 	ldr	r3, [pc, #360]	; c28 <__call_exitprocs+0x174>
 abc:	e5933000 	ldr	r3, [r3]
 ac0:	e24dd014 	sub	sp, sp, #20
 ac4:	e58d3004 	str	r3, [sp, #4]
 ac8:	e2833f52 	add	r3, r3, #328	; 0x148
 acc:	e58d0008 	str	r0, [sp, #8]
 ad0:	e58d300c 	str	r3, [sp, #12]
 ad4:	e1a07001 	mov	r7, r1
 ad8:	e3a08001 	mov	r8, #1
 adc:	e59d3004 	ldr	r3, [sp, #4]
 ae0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 ae4:	e3560000 	cmp	r6, #0
 ae8:	e59db00c 	ldr	r11, [sp, #12]
 aec:	0a000033 	beq	bc0 <__call_exitprocs+0x10c>
 af0:	e5965004 	ldr	r5, [r6, #4]
 af4:	e2554001 	subs	r4, r5, #1
 af8:	5286a088 	addpl	r10, r6, #136	; 0x88
 afc:	5285501f 	addpl	r5, r5, #31
 b00:	508a5105 	addpl	r5, r10, r5, lsl #2
 b04:	5a000007 	bpl	b28 <__call_exitprocs+0x74>
 b08:	ea000029 	b	bb4 <__call_exitprocs+0x100>
 b0c:	e5953000 	ldr	r3, [r5]
 b10:	e1530007 	cmp	r3, r7
 b14:	0a000005 	beq	b30 <__call_exitprocs+0x7c>
 b18:	e2444001 	sub	r4, r4, #1
 b1c:	e3740001 	cmn	r4, #1
 b20:	e2455004 	sub	r5, r5, #4
 b24:	0a000022 	beq	bb4 <__call_exitprocs+0x100>
 b28:	e3570000 	cmp	r7, #0
 b2c:	1afffff6 	bne	b0c <__call_exitprocs+0x58>
 b30:	e5963004 	ldr	r3, [r6, #4]
 b34:	e06a2005 	rsb	r2, r10, r5
 b38:	e2433001 	sub	r3, r3, #1
 b3c:	e0862002 	add	r2, r6, r2
 b40:	e1530004 	cmp	r3, r4
 b44:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 b48:	13a01000 	movne	r1, #0
 b4c:	05864004 	streq	r4, [r6, #4]
 b50:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 b54:	e3530000 	cmp	r3, #0
 b58:	0affffee 	beq	b18 <__call_exitprocs+0x64>
 b5c:	e1a02418 	lsl	r2, r8, r4
 b60:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 b64:	e1120001 	tst	r2, r1
 b68:	e5969004 	ldr	r9, [r6, #4]
 b6c:	0a000016 	beq	bcc <__call_exitprocs+0x118>
 b70:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 b74:	e1120001 	tst	r2, r1
 b78:	1a000016 	bne	bd8 <__call_exitprocs+0x124>
 b7c:	e59d0008 	ldr	r0, [sp, #8]
 b80:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 b84:	e1a0e00f 	mov	lr, pc
 b88:	e12fff13 	bx	r3
 b8c:	e5963004 	ldr	r3, [r6, #4]
 b90:	e1530009 	cmp	r3, r9
 b94:	1affffd0 	bne	adc <__call_exitprocs+0x28>
 b98:	e59b3000 	ldr	r3, [r11]
 b9c:	e1530006 	cmp	r3, r6
 ba0:	1affffcd 	bne	adc <__call_exitprocs+0x28>
 ba4:	e2444001 	sub	r4, r4, #1
 ba8:	e3740001 	cmn	r4, #1
 bac:	e2455004 	sub	r5, r5, #4
 bb0:	1affffdc 	bne	b28 <__call_exitprocs+0x74>
 bb4:	e59f1070 	ldr	r1, [pc, #112]	; c2c <__call_exitprocs+0x178>
 bb8:	e3510000 	cmp	r1, #0
 bbc:	1a000009 	bne	be8 <__call_exitprocs+0x134>
 bc0:	e28dd014 	add	sp, sp, #20
 bc4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 bc8:	e12fff1e 	bx	lr
 bcc:	e1a0e00f 	mov	lr, pc
 bd0:	e12fff13 	bx	r3
 bd4:	eaffffec 	b	b8c <__call_exitprocs+0xd8>
 bd8:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 bdc:	e1a0e00f 	mov	lr, pc
 be0:	e12fff13 	bx	r3
 be4:	eaffffe8 	b	b8c <__call_exitprocs+0xd8>
 be8:	e5963004 	ldr	r3, [r6, #4]
 bec:	e3530000 	cmp	r3, #0
 bf0:	e5963000 	ldr	r3, [r6]
 bf4:	1a000008 	bne	c1c <__call_exitprocs+0x168>
 bf8:	e3530000 	cmp	r3, #0
 bfc:	0a000006 	beq	c1c <__call_exitprocs+0x168>
 c00:	e1a00006 	mov	r0, r6
 c04:	e58b3000 	str	r3, [r11]
 c08:	e320f000 	nop	{0}
 c0c:	e59b6000 	ldr	r6, [r11]
 c10:	e3560000 	cmp	r6, #0
 c14:	1affffb5 	bne	af0 <__call_exitprocs+0x3c>
 c18:	eaffffe8 	b	bc0 <__call_exitprocs+0x10c>
 c1c:	e1a0b006 	mov	r11, r6
 c20:	e1a06003 	mov	r6, r3
 c24:	eafffff9 	b	c10 <__call_exitprocs+0x15c>
 c28:	00000d8c 	.word	0x00000d8c
 c2c:	00000000 	.word	0x00000000

00000c30 <register_fini>:
 c30:	e92d4008 	push	{r3, lr}
 c34:	e59f3010 	ldr	r3, [pc, #16]	; c4c <register_fini+0x1c>
 c38:	e3530000 	cmp	r3, #0
 c3c:	159f000c 	ldrne	r0, [pc, #12]	; c50 <register_fini+0x20>
 c40:	1bffff49 	blne	96c <atexit>
 c44:	e8bd4008 	pop	{r3, lr}
 c48:	e12fff1e 	bx	lr
 c4c:	00000db4 	.word	0x00000db4
 c50:	00000c54 	.word	0x00000c54

00000c54 <__libc_fini_array>:
 c54:	e92d4038 	push	{r3, r4, r5, lr}
 c58:	e59f5030 	ldr	r5, [pc, #48]	; c90 <__libc_fini_array+0x3c>
 c5c:	e59f4030 	ldr	r4, [pc, #48]	; c94 <__libc_fini_array+0x40>
 c60:	e0654004 	rsb	r4, r5, r4
 c64:	e1b04144 	asrs	r4, r4, #2
 c68:	10855104 	addne	r5, r5, r4, lsl #2
 c6c:	0a000004 	beq	c84 <__libc_fini_array+0x30>
 c70:	e5353004 	ldr	r3, [r5, #-4]!
 c74:	e1a0e00f 	mov	lr, pc
 c78:	e12fff13 	bx	r3
 c7c:	e2544001 	subs	r4, r4, #1
 c80:	1afffffa 	bne	c70 <__libc_fini_array+0x1c>
 c84:	eb00004a 	bl	db4 <__libc_fini>
 c88:	e8bd4038 	pop	{r3, r4, r5, lr}
 c8c:	e12fff1e 	bx	lr
 c90:	00000dcc 	.word	0x00000dcc
 c94:	00000dd0 	.word	0x00000dd0

00000c98 <__cs3_premain>:
 c98:	e92d4008 	push	{r3, lr}
 c9c:	eb000017 	bl	d00 <__libc_init_array>
 ca0:	e59f3030 	ldr	r3, [pc, #48]	; cd8 <__cs3_premain+0x40>
 ca4:	e3530000 	cmp	r3, #0
 ca8:	15930000 	ldrne	r0, [r3]
 cac:	01a00003 	moveq	r0, r3
 cb0:	e59f3024 	ldr	r3, [pc, #36]	; cdc <__cs3_premain+0x44>
 cb4:	e3530000 	cmp	r3, #0
 cb8:	15931000 	ldrne	r1, [r3]
 cbc:	01a01003 	moveq	r1, r3
 cc0:	e3a02000 	mov	r2, #0
 cc4:	ebfffee2 	bl	854 <main>
 cc8:	e59f3010 	ldr	r3, [pc, #16]	; ce0 <__cs3_premain+0x48>
 ccc:	e3530000 	cmp	r3, #0
 cd0:	1bffff2d 	blne	98c <exit>
 cd4:	eafffffe 	b	cd4 <__cs3_premain+0x3c>
	...
 ce0:	0000098c 	.word	0x0000098c

00000ce4 <_exit>:
 ce4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 ce8:	e3a00018 	mov	r0, #24
 cec:	e59f1004 	ldr	r1, [pc, #4]	; cf8 <_exit+0x14>
 cf0:	ef123456 	svc	0x00123456
 cf4:	eafffffe 	b	cf4 <_exit+0x10>
 cf8:	00020026 	.word	0x00020026

00000cfc <__cs3_isr_interrupt>:
 cfc:	eafffffe 	b	cfc <__cs3_isr_interrupt>

00000d00 <__libc_init_array>:
 d00:	e92d4070 	push	{r4, r5, r6, lr}
 d04:	e59f506c 	ldr	r5, [pc, #108]	; d78 <__libc_init_array+0x78>
 d08:	e59f606c 	ldr	r6, [pc, #108]	; d7c <__libc_init_array+0x7c>
 d0c:	e0656006 	rsb	r6, r5, r6
 d10:	e1b06146 	asrs	r6, r6, #2
 d14:	12455004 	subne	r5, r5, #4
 d18:	13a04000 	movne	r4, #0
 d1c:	0a000005 	beq	d38 <__libc_init_array+0x38>
 d20:	e5b53004 	ldr	r3, [r5, #4]!
 d24:	e2844001 	add	r4, r4, #1
 d28:	e1a0e00f 	mov	lr, pc
 d2c:	e12fff13 	bx	r3
 d30:	e1560004 	cmp	r6, r4
 d34:	1afffff9 	bne	d20 <__libc_init_array+0x20>
 d38:	e59f5040 	ldr	r5, [pc, #64]	; d80 <__libc_init_array+0x80>
 d3c:	e59f6040 	ldr	r6, [pc, #64]	; d84 <__libc_init_array+0x84>
 d40:	e0656006 	rsb	r6, r5, r6
 d44:	eb000012 	bl	d94 <_init>
 d48:	e1b06146 	asrs	r6, r6, #2
 d4c:	12455004 	subne	r5, r5, #4
 d50:	13a04000 	movne	r4, #0
 d54:	0a000005 	beq	d70 <__libc_init_array+0x70>
 d58:	e5b53004 	ldr	r3, [r5, #4]!
 d5c:	e2844001 	add	r4, r4, #1
 d60:	e1a0e00f 	mov	lr, pc
 d64:	e12fff13 	bx	r3
 d68:	e1560004 	cmp	r6, r4
 d6c:	1afffff9 	bne	d58 <__libc_init_array+0x58>
 d70:	e8bd4070 	pop	{r4, r5, r6, lr}
 d74:	e12fff1e 	bx	lr
 d78:	00000dac 	.word	0x00000dac
 d7c:	00000dac 	.word	0x00000dac
 d80:	00000dac 	.word	0x00000dac
 d84:	00000db4 	.word	0x00000db4

Disassembly of section .rodata:

00000d8c <_global_impure_ptr>:
 d8c:	00000df8 00000043                       ....C...

00000d94 <_init>:
 d94:	e1a0c00d 	mov	r12, sp
 d98:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 d9c:	e24cb004 	sub	r11, r12, #4
 da0:	e24bd028 	sub	sp, r11, #40	; 0x28
 da4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 da8:	e12fff1e 	bx	lr

00000dac <__init_array_start>:
 dac:	00000c30 	.word	0x00000c30

00000db0 <__frame_dummy_init_array_entry>:
 db0:	00000208                                ....

00000db4 <__libc_fini>:
 db4:	e1a0c00d 	mov	r12, sp
 db8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 dbc:	e24cb004 	sub	r11, r12, #4
 dc0:	e24bd028 	sub	sp, r11, #40	; 0x28
 dc4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 dc8:	e12fff1e 	bx	lr

00000dcc <__fini_array_start>:
 dcc:	000001c4 	.word	0x000001c4

00000dd0 <__cs3_regions>:
 dd0:	00000000 	.word	0x00000000
 dd4:	00000040 	.word	0x00000040
 dd8:	00000040 	.word	0x00000040
 ddc:	000011e8 	.word	0x000011e8
 de0:	00000020 	.word	0x00000020

00000de4 <__cs3_regions_end>:
 de4:	00000000 	.word	0x00000000
